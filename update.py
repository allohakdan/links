#!/usr/bin/env python
# [db] 2016/08/11
# Use with cronjob */5 * * * * ~/.../update.py
# cronjob installed on cs1
import os
import datetime
import requests
import ConfigParser
import subprocess

# Settings - these are files in the same directory as script
configfile = "links.ini"
githubconfigurl = "https://raw.githubusercontent.com/allohakdan/links/master/links.ini"
outputfile = ".htaccess"
indexfile = "links.html"

# Initialize the directory the script is located in
path = os.path.dirname(os.path.realpath(__file__))


# Determine if the github version of the config file is different from ours 
remote = requests.get(githubconfigurl).text
with open(os.path.join(path,configfile), "r") as f:
    local = "".join(f.readlines())
if remote == local:
    print "No Change"
    exit(0)
print "Update Found"


# Download the new changes
process = subprocess.Popen(["git","pull","origin","master"], cwd=path, stdout=subprocess.PIPE)
print process.communicate()[0]


# Load the configuration file
print "Loading Config file"
if not os.path.exists(os.path.join(path,configfile)):
    raise Exception("%s files does not exist" % configfile)
parser = ConfigParser.ConfigParser()
parser.read(os.path.join(path,configfile))
if not parser.has_section("LINKS"):
    raise Exception("LINKS section must be defined")


# Initialize the output file buffer
htaccess_buffer = list()
htaccess_buffer.append("# This file is autogenerated - do not edit directly.")
htaccess_buffer.append("# Last updated: %s" % str(datetime.datetime.now()))
htaccess_buffer.append("Options +FollowSymLinks")
htaccess_buffer.append("RewriteEngine on")
htaccess_buffer.append("RewriteRule ^.htaccess$ - [r=404,L] # Hide links file")
htaccess_buffer.append("RewriteRule ^.git$ - [r=404,L] # Hide links file")
#htaccess_buffer.append("RewriteRule ^links.ini$ - [r=404,L] # Hide links file")

# Initialize links file buffer
index_buffer = list()
index_buffer.append("<html><body>")

# Copy the links into the output file buffer
# Why use NE - http://stackoverflow.com/a/11380893 
linkrefs = parser.options("LINKS")
for linkref in linkrefs:
    htaccess_buffer.append("RewriteRule ^%s$ %s [r=302,NE,L]" % (linkref, parser.get("LINKS", linkref)))
    index_buffer.append("<a href=\"%s\">%s</a><br/>" % (parser.get("LINKS", linkref), linkref)) 

index_buffer.append("</body></html>")


# Write the buffer to the output file
with open(os.path.join(path,outputfile), "w") as f:
    for line in htaccess_buffer:
        f.write(line+"\n")

with open(os.path.join(path,indexfile), "w") as f:
    for line in index_buffer:
        f.write(line+"\n")
